name: make release packages

on:
  workflow_dispatch:
    inputs:
      prerelease:
        description: 'Create as pre-release'
        required: true
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

permissions:
  contents: write

jobs:

  get-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
      - name: Get the version
        id: get_version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=development" >> $GITHUB_OUTPUT
          fi
  build:
    needs: get-version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            target: linux
            output-directory: build/linux/x64/release/bundle/
            setup: |
              sudo apt-get update -y
              sudo apt-get install -y ninja-build libgtk-3-dev

          - os: windows-latest
            platform: windows
            target: windows
            output-directory: build/windows/x64/runner/Release/
            setup: choco install openssl

          - os: macos-latest
            platform: macos
            target: macos
            output-directory: build/macos/Build/Products/Release/
            setup: |
              brew update
              brew install ninja

          - os: ubuntu-latest
            platform: android
            target: apk
            output-directory: build/app/outputs/flutter-apk/
            setup: |
              sudo apt-get update -y
              sudo apt-get install -y ninja-build libgtk-3-dev

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        id: flutter-action
        with:
          channel: 'stable'
          cache: true
          cache-key: "flutter-:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache
          cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
          pub-cache-key: "flutter-pub:os:-:channel:-:version:-:arch:-:hash:" # optional, change this to force refresh cache of dart pub get dependencies
          pub-cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
      - name: Print outputs
        shell: bash
        run: |
          echo CACHE-PATH=${{ steps.flutter-action.outputs.CACHE-PATH }}
          echo CACHE-KEY=${{ steps.flutter-action.outputs.CACHE-KEY }}
          echo CHANNEL=${{ steps.flutter-action.outputs.CHANNEL }}
          echo VERSION=${{ steps.flutter-action.outputs.VERSION }}
          echo ARCHITECTURE=${{ steps.flutter-action.outputs.ARCHITECTURE }}
          echo PUB-CACHE-PATH=${{ steps.flutter-action.outputs.PUB-CACHE-PATH }}
          echo PUB-CACHE-KEY=${{ steps.flutter-action.outputs.PUB-CACHE-KEY }}
      - run: flutter --version
      - name: Create Dart file from secret
        run: |
          echo "${{ secrets.ENV_FILE }}" > .env
          
      - name: Setup platform-specific dependencies
        run: ${{ matrix.setup }}

      - name: Setup (Android)
        if: matrix.platform == 'android'
        uses: actions/setup-java@v2
        with:
          java-version: 17
          distribution: "temurin"
          cache: 'gradle'

      - name: Setup Android signing
        if: matrix.platform == 'android'
        env:
          KEY_JKS: ${{ secrets.KEY_JKS }}
          KEY_PROPERTIES: ${{ secrets.KEY_PROPERTIES }}
        run: |
          echo $KEY_JKS | base64 --decode > android/app/key.jks
          echo $KEY_PROPERTIES | base64 --decode > android/key.properties

      - name: Install dependencies and generate code
        run: |
          flutter pub get
          flutter pub run build_runner build --delete-conflicting-outputs
          flutter pub run flutter_launcher_icons:main
      - name: Build artifacts
        run: flutter build ${{ matrix.target }} --release
    # - run: flutter pub run msix:create 
    # - run: |
    #     move build\windows\x64\runner\Release\enjanet_pocket.msix enjanet-pocket-${{ needs.get-version.outputs.version }}-windows.msix 
  
      - name: Make release zip(linux and windows and macos)
        if: matrix.platform == 'linux' || matrix.platform == 'windows' || matrix.platform == 'macos'
        uses: thedoctor0/zip-release@main
        with:
          type: 'zip'
          filename: enjanet-pocket-${{ needs.get-version.outputs.version }}-${{ matrix.platform }}.zip
          directory: ${{ matrix.output-directory }}
          

      - name: Move artifacts to root
        shell: bash
        run: |
          if [ "${{ matrix.platform }}" != "android" ]; then
            mv ${{ matrix.output-directory }}/enjanet-pocket-${{ needs.get-version.outputs.version }}-${{ matrix.platform }}.zip ./
          else
            mv ${{ matrix.output-directory }}/app-release.apk ./enjanet-pocket-${{ needs.get-version.outputs.version }}-android.apk
          fi
        
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-artifact
          path: |
            *.zip
            *.apk
  create-release:
    needs: [get-version, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            **/enjanet-pocket-${{ needs.get-version.outputs.version }}-*.zip
            **/enjanet-pocket-${{ needs.get-version.outputs.version }}-*.apk
          tag_name: ${{ needs.get-version.outputs.version }}
          name: Release ${{ needs.get-version.outputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
